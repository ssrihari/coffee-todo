// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Item = (function() {

    Item.COUNT = 0;

    function Item(listID, id, data) {
      this.save = __bind(this.save, this);

      var inputDiv;
      Item.COUNT++;
      this.listID = listID;
      this.id = ((id != null) ? id : Item.COUNT);
      this.input = $('<input type="text"/>');
      this.input.attr('id', "list-" + this.listID + "-item-" + this.id);
      if (data != null) {
        this.input.val(data);
      }
      this.input.keyup(this.save);
      inputDiv = $('<div class="item"></div>');
      inputDiv.append(this.input);
      $("#list-" + this.listID + "-items").append(inputDiv);
    }

    Item.prototype.content = function() {
      return $(this.input).val();
    };

    Item.prototype.save = function() {
      var itemData;
      console.log("save called");
      itemData = this.content();
      return $.post("item.php", {
        data: itemData,
        'id': this.id,
        'list_id': this.listID
      }, function(data) {
        return console.log("Data Loaded: " + data);
      });
    };

    Item.init = function() {
      return $.get("item.php", {
        all: "true"
      }, function(data) {
        var i, item, _results;
        data = JSON.parse(data);
        _results = [];
        for (i in data) {
          item = data[i];
          console.log(item['id'] + '-' + item['data']);
          _results.push(Item.all[item['id']] = new Item(item['id'], item['data']));
        }
        return _results;
      });
    };

    return Item;

  })();

}).call(this);
