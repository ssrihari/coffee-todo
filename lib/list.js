// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.List = (function() {

    List.COUNT = 0;

    List.all = {};

    function List(id, name) {
      this.setUpView = __bind(this.setUpView, this);

      this.addItem = __bind(this.addItem, this);
      List.COUNT++;
      this.items = [];
      this.input = $('<input type="text"/>');
      this.input.keyup(this.listNameChanged);
      this.id = ((id != null) ? id : List.COUNT);
      if ((name != null)) {
        this.input.val(name);
      } else {
        this.input.val("List");
      }
      this.input.attr('id', "list-" + this.id + "-name");
      $(".board").append(this.setUpView());
    }

    List.prototype.addItem = function() {
      console.log(this.id);
      return this.items.push(new Item(this.id));
    };

    List.prototype.setUpView = function() {
      var addItemDiv, listContainer, listItemsDiv, listNameDiv;
      listContainer = $('<div class="list-container"></div>');
      listNameDiv = $('<div class="list-name"></div>');
      listNameDiv.append(this.input);
      listItemsDiv = $('<div class="list-items"></div>');
      listItemsDiv.attr('id', "list-" + this.id + "-items");
      addItemDiv = $('<div class="add-item">+</div>');
      addItemDiv.click(this.addItem);
      listContainer.append(listNameDiv);
      listContainer.append(listItemsDiv);
      listContainer.append(addItemDiv);
      return listContainer;
    };

    List.prototype.content = function() {
      return $(this.input).val();
    };

    List.prototype.save = function() {};

    List.prototype.listNameChanged = function() {};

    List.init = function() {
      return List.all[1] = new List();
    };

    return List;

  })();

}).call(this);
